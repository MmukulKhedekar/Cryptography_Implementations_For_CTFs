# sage: from sage.numerical.knapsack import knapsack,Superincreasing
# sage: B = [243873082678558120886143238109,
#     140121004360885317204645106697,
#     65971149179852778782856023084,
#     198367501585318217337192915461,
#     90780110766692265488675597096,
#     204457189038632581915443073067,
#     11843936715392553537334014601,
#     249714131767678082951811660354,
#     46864685536820768096162079781,
#     270615453249669076126135660113,
#     62422813932318315478542903448,
#     54340894478463039745320012710,
#     82166063070770734716784239617,
#     123360554027599432641005228613,
#     225930829813243714315757104718,
#     140931881774215407739681383827,
#     153511648985484571193029079380,
#     128333502017904902954574343976,
#     157971994970491620681977801348,
#     151995940102680832680366775791,
#     111930343189002833676566713355,
#     254629522353980890137482003596,
#     46122603870700121747541022366,
#     106621126674742413122499956117,
#     213619593425584289387962971025,
#     250029395347234943835276840576,
#     90157964719511330175905946756,
#     160955342950540531541477834386,
#     62686435507426271661129199824,
#     48684199759430660574537497320,
#     262348080860779266021957164776,
#     123406793114541556721282454859,
#     8323348282744522342656453505,
#     8204832183897468999773786370,
#     117068364683450498818799008726,
#     22742733514396961388718208907,
#     152588763365550382579175625426,
#     18880903696373297518512895359,
#     168999842801038138048571134864,
#     251946102324340921852977277387,
#     62739530425883979430660351271,
#     26189963743964979633698113800,
#     149052997409450695582768647188,
#     161035032125544665156226726161,
#     170005203789455944372862796495,
#     127446446141939678833034246067,
#     66890847724290458515749208331,
#     230355717600508139033028789245]
# sage: msg = 4096661050207034370558640511465
# sage: msg2 =2180575349431943804625630604384
# sage: nbit=48
# sage: A = Matrix(ZZ, nbit + 1, nbit + 1)
# sage: for i in range(nbit):
#          A[i, i] = 1
# sage: for i in range(nbit):
#          A[i, nbit] = B[i]
# sage: A[nbit, nbit] = -int(msg)
# sage: res = A.LLL()
# sage: for i in range(0, nbit + 1):
#         M = res.row(i).list()
#         flag = True
#         for m in M:
#             if m != 0 and m != 1:
#                 flag = False
#                 break
#         if flag:
#             print (i, M)
#             M = ''.join(str(j) for j in M)
#             M = M[:-1]
#             M = hex(int(M, 2))[2:-1]
#             print(M)


ans = [1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0] #0]
for i in ans:
    print(i,end="")
print("\n")
print(hex(int("110101000010110111111111110110110011001011101000",2)))
print(int("110101000010110111111111110110110011001011101000",2))
print(len(ans))

# verify
# sum2=0
# for i in range(48):
#     sum2+=B[i]*ans[i]
# print(sum2)
# super_sec = 233294031172328
# def encrypt(public, m):
#     return sum([public[i] * ((m >> (48 - i - 1)) & 1) for i in range(48)])
# msg = encrypt(B, super_sec)
# print(msg)
